local engine = require("wh_quest.engine")
local level = require("main.Level")

local markers = {}

local function showMarker(id)
	local position = go.get_position(id)
	position.y = position.y - 8
	markers[id] = factory.create("#markerFactory", position, nil, nil, vmath.vector3(0.2, 0.2, 1))
end

local function hideMarker(id)
	go.delete(markers[id])
	markers[id] = nil
end

-- Quest engine delegate
local function delegate(self)
	local M = {}

	function M.on_pick_item(item)
		go.delete(item, true)
	end

	function M.on_update_inventory(items)
		msg.post("#gui", "updateInventory")
	end

	function M.on_finish_act()
		-- Nothing to do here yet
	end

	function M.show_dialog(dialog)
		msg.post("#gui", "showDialog", {dialog = dialog})
	end

	function M.show_choice(options)
		msg.post("#gui", "showChoice", {options = options})
	end

	return M
end

function init(self)
	engine.init(level, delegate(self))
	--msg.post("@system:", "toggle_physics_debug") 
end

function final(self)
	engine.final()
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("newCollision") then
		showMarker(message.id)
	elseif message_id == hash("finishedCollision") then
		hideMarker(message.id)
	elseif message_id == hash("pickItem") then
		engine.inventory.pick_item(message.id)
	elseif message_id == hash("actNpc") then
		engine.act_npc(message.id)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end
